Is_VBZ it_PRP important_JJ for_IN students_NNS to_TO understand_VB ideas_NNS and_CC concepts_NNS ?_.
of_IN course_NN it_PRP is_VBZ we_PRP can_MD not_RB deny_VB that_IN studying_VBG a_DT subject_JJ and_CC learning_VBG this_DT subject_NN does_VBZ not_RB necessary_JJ imply_VBP that_IN you_PRP undestood_VBD the_DT whole_JJ idea_NN and_CC the_DT whole_JJ concept_NN ._.
Sometimes_RB might_MD be_VB better_JJR to_TO understand_VB the_DT whole_JJ sense_NN of_IN a_DT lecture_NN at_IN your_PRP$ first_JJ read_NN for_IN example_NN instead_RB of_IN reading_VBG it_PRP more_RBR and_CC more_RBR times_NNS to_TO learn_VB every_DT single_JJ word_NN of_IN it_PRP and_CC being_VBG able_JJ to_TO repeat_VB it_PRP in_IN front_NN of_IN the_DT professors_NNS during_IN an_DT oral_JJ examination_NN !_.
I_PRP would_MD rather_RB look_VB like_IN a_DT computer_NN machine_NN repeating_VBG binary_JJ codes_NNS without_IN understanding_VBG why_WRB and_CC what_WP it_PRP is_VBZ really_RB doing_VBG !_.
I_PRP think_VBP that_IN to_TO better_JJR comprehend_NN this_DT idea_NN ,_, comptures_NNS might_MD be_VB the_DT perfect_JJ example_NN ._.
The_DT whole_JJ concept_NN is_VBZ that_IN scientist_NN built_VBD the_DT machines_NNS to_TO help_VB people_NNS perform_VB their_PRP$ jobs_NNS easily_RB simplifing_VBG complex_JJ procedures_NNS using_VBG software_NN based_VBN products_NNS ._.
The_DT machine_NN is_VBZ able_JJ to_TO perform_VB all_PDT this_DT complex_JJ operations_NNS in_IN a_DT very_RB short_JJ time_NN because_IN somebody_NN programmed_VBN it_PRP to_TO reapeat_VB a_DT matrix_NN of_IN data_NNS and_CC multiplexing_VBG it_PRP in_IN different_JJ ways_NNS ,_, the_DT machine_NN is_VBZ able_JJ to_TO reproduce_VB always_RB the_DT same_JJ actions_NNS but_CC is_VBZ definitively_RB not_RB able_JJ to_TO understand_VB why_WRB is_VBZ performing_VBG this_DT action_NN ,_, is_VBZ not_RB able_JJ to_TO learn_VB from_IN his_PRP$ errors_NNS ,_, is_VBZ not_RB able_JJ to_TO modify_VB automatically_RB his_PRP$ behaviour_NN ._.
That_DT 's_VBZ mainly_RB why_WRB I_PRP think_VBP any_DT sort_NN of_IN attempt_NN to_TO learn_VB facts_NNS for_IN what_WP they_PRP actually_RB are_VBP whitout_JJ understanding_NN what_WP is_VBZ the_DT whole_JJ idea_NN or_CC concept_NN behind_IN them_PRP is_VBZ totally_RB unuseful_JJ for_IN the_DT student_NN ._.
Once_RB again_RB if_IN the_DT student_NN does_VBZ n't_RB understand_VB the_DT concept_NN he_PRP might_MD not_RB be_VB able_JJ to_TO modify_VB his_PRP$ beahviour_NN has_VBZ the_DT example_NN of_IN the_DT computer_NN machine_NN ,_, because_RB without_IN understanding_VBG behaviour_NN modification_NN will_MD not_RB occur_VB ._.
You_PRP can_MD learn_VB from_IN you_PRP errors_NNS and_CC mistakes_NNS ,_, a_DT teacher_NN can_MD correct_VB you_PRP if_IN you_PRP are_VBP doing_VBG something_NN wrong_JJ ,_, people_NNS can_MD learn_VB from_IN their_PRP$ own_JJ mistakes_NNS ,_, but_CC if_IN they_PRP keep_VBP on_IN replicating_VBG what_WP everyonelse_NN is_VBZ doing_VBG and_CC repeat_NN what_WP the_DT manager_NN or_CC the_DT boss_NN says_VBZ they_PRP will_MD always_RB be_VB stucked_VBN in_IN their_PRP$ original_JJ ,_, let_VB 's_POS say_VB ``_`` behaviour_NN ''_'' no_DT behaviour_NN modification_NN will_MD occur_VB ,_, thus_RB preventing_VBG them_PRP to_TO emerge_VB and_CC to_TO become_VB powerful_JJ or_CC to_TO express_VB and_CC sell_VB their_PRP$ own_JJ ideas_NNS ._.
